/*
 * Additional Info Management API
 * API for managing views, reviews, continue-watching functionality, and other additional operations for content on a streaming platform.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import ReviewRequest from '../model/ReviewRequest';
import ReviewResponse from '../model/ReviewResponse';
import ReviewsResponse from '../model/ReviewsResponse';
import SuccessResponse from '../model/SuccessResponse';
import UpdateReviewRequest from '../model/UpdateReviewRequest';

/**
* Reviews service.
* @module api/ReviewsApi
* @version 1.0.0
*/
export default class ReviewsApi {

    /**
    * Constructs a new ReviewsApi. 
    * @alias module:api/ReviewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addNumericReviewForContent operation.
     * @callback moduleapi/ReviewsApi~addNumericReviewForContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a numeric review for content by user and profile
     * Submit a numeric review for a specific content by a user and profile.
     * @param {module:model/ReviewRequest} body The review data
     * @param {Number} contentId The ID of the content
     * @param {Number} userId The ID of the user
     * @param {Number} profileId The ID of the profile
     * @param {module:api/ReviewsApi~addNumericReviewForContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addNumericReviewForContent(body, contentId, userId, profileId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addNumericReviewForContent");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling addNumericReviewForContent");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addNumericReviewForContent");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling addNumericReviewForContent");
      }

      let pathParams = {
        'content_id': contentId,'user_id': userId,'profile_id': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/reviews/users/{user_id}/profiles/{profile_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteNumericReviewForContent operation.
     * @callback moduleapi/ReviewsApi~deleteNumericReviewForContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific review for content by user and profile
     * Delete a specific numeric review for a given content by a user and profile.
     * @param {Number} contentId The ID of the content
     * @param {Number} userId The ID of the user
     * @param {Number} profileId The ID of the profile
     * @param {module:api/ReviewsApi~deleteNumericReviewForContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteNumericReviewForContent(contentId, userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteNumericReviewForContent");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteNumericReviewForContent");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling deleteNumericReviewForContent");
      }

      let pathParams = {
        'content_id': contentId,'user_id': userId,'profile_id': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/reviews/users/{user_id}/profiles/{profile_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNumericReviewForContentByUserAndProfile operation.
     * @callback moduleapi/ReviewsApi~getNumericReviewForContentByUserAndProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific review for content by user and profile
     * Retrieve a specific numeric review made by a user for a given content and profile.
     * @param {Number} contentId The ID of the content
     * @param {Number} userId The ID of the user
     * @param {Number} profileId The ID of the profile
     * @param {module:api/ReviewsApi~getNumericReviewForContentByUserAndProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNumericReviewForContentByUserAndProfile(contentId, userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getNumericReviewForContentByUserAndProfile");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNumericReviewForContentByUserAndProfile");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getNumericReviewForContentByUserAndProfile");
      }

      let pathParams = {
        'content_id': contentId,'user_id': userId,'profile_id': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/reviews/users/{user_id}/profiles/{profile_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNumericReviewsByUser operation.
     * @callback moduleapi/ReviewsApi~getNumericReviewsByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reviews by user
     * Retrieve all numeric reviews made by a specific user.
     * @param {Number} userId The ID of the user
     * @param {module:api/ReviewsApi~getNumericReviewsByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNumericReviewsByUser(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getNumericReviewsByUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewsResponse;

      return this.apiClient.callApi(
        '/users/{user_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNumericReviewsForContent operation.
     * @callback moduleapi/ReviewsApi~getNumericReviewsForContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get numeric reviews for specific content
     * Retrieve all numeric reviews (user ID and rating) made for a specific content.
     * @param {Number} contentId The ID of the content
     * @param {module:api/ReviewsApi~getNumericReviewsForContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNumericReviewsForContent(contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getNumericReviewsForContent");
      }

      let pathParams = {
        'content_id': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewsResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateNumericReviewForContentByUserAndProfile operation.
     * @callback moduleapi/ReviewsApi~updateNumericReviewForContentByUserAndProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific review for content by user and profile
     * Update an existing numeric review for a given content, user, and profile.
     * @param {module:model/UpdateReviewRequest} body The updated review data
     * @param {Number} contentId The ID of the content
     * @param {Number} userId The ID of the user
     * @param {Number} profileId The ID of the profile
     * @param {module:api/ReviewsApi~updateNumericReviewForContentByUserAndProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateNumericReviewForContentByUserAndProfile(body, contentId, userId, profileId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNumericReviewForContentByUserAndProfile");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling updateNumericReviewForContentByUserAndProfile");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateNumericReviewForContentByUserAndProfile");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateNumericReviewForContentByUserAndProfile");
      }

      let pathParams = {
        'content_id': contentId,'user_id': userId,'profile_id': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/reviews/users/{user_id}/profiles/{profile_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}