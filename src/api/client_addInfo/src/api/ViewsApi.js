/*
 * Additional Info Management API
 * API for managing views, reviews, continue-watching functionality, and other additional operations for content on a streaming platform.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import SuccessResponse from '../model/SuccessResponse';
import UpdateViewRequest from '../model/UpdateViewRequest';
import ViewRequest from '../model/ViewRequest';
import ViewResponse from '../model/ViewResponse';

/**
* Views service.
* @module api/ViewsApi
* @version 1.0.0
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addContentView operation.
     * @callback moduleapi/ViewsApi~addContentViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a view entry for content
     * Add a new view entry for a specific content.
     * @param {module:model/ViewRequest} body Data for the new view entry
     * @param {Number} contentId The ID of the content
     * @param {module:api/ViewsApi~addContentViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addContentView(body, contentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addContentView");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling addContentView");
      }

      let pathParams = {
        'content_id': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/views', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteContentView operation.
     * @callback moduleapi/ViewsApi~deleteContentViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete view entry for content by user
     * Delete a view entry for a specific content and user.
     * @param {Number} contentId The ID of the content
     * @param {module:api/ViewsApi~deleteContentViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteContentView(contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteContentView");
      }

      let pathParams = {
        'content_id': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/views', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getContentViews operation.
     * @callback moduleapi/ViewsApi~getContentViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get number of views for content
     * Retrieve the number of views for a specific content.
     * @param {Number} contentId The ID of the content
     * @param {module:api/ViewsApi~getContentViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getContentViews(contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getContentViews");
      }

      let pathParams = {
        'content_id': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ViewResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateContentView operation.
     * @callback moduleapi/ViewsApi~updateContentViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update view count for specific content and user
     * Update the view count for a specific content by a user.
     * @param {module:model/UpdateViewRequest} body Updated view count
     * @param {Number} contentId The ID of the content
     * @param {module:api/ViewsApi~updateContentViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateContentView(body, contentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContentView");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling updateContentView");
      }

      let pathParams = {
        'content_id': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessResponse;

      return this.apiClient.callApi(
        '/contents/{content_id}/views', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}