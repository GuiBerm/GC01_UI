/*
 * User and Profile Management API
 * API for managing users, profiles, and individual content lists.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";

/**
* Lists service.
* @module api/ListsApi
* @version 1.0.0
*/
export default class ListsApi {

    /**
    * Constructs a new ListsApi. 
    * @alias module:api/ListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsFavoritesContentIdDelete operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsFavoritesContentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove content from favorites
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {Number} contentId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsFavoritesContentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdListsFavoritesContentIdDelete(userId, profileId, contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsFavoritesContentIdDelete");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsFavoritesContentIdDelete");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling usersUserIdProfilesProfileIdListsFavoritesContentIdDelete");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId,'contentId': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/favorites/{contentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsFavoritesGet operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsFavoritesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get favorite content list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsFavoritesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdProfilesProfileIdListsFavoritesGet(userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsFavoritesGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsFavoritesGet");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsFavoritesPost operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsFavoritesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add content to favorites
     * @param {Number} body ID of the content to be added to favorites
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsFavoritesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdListsFavoritesPost(body, userId, profileId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUserIdProfilesProfileIdListsFavoritesPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsFavoritesPost");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsFavoritesPost");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/favorites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDelete operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove content from recently watched list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {Number} contentId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDelete(userId, profileId, contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDelete");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDelete");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedContentIdDelete");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId,'contentId': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/recently-watched/{contentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsRecentlyWatchedGet operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsRecentlyWatchedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recently watched content list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsRecentlyWatchedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdProfilesProfileIdListsRecentlyWatchedGet(userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedGet");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/recently-watched', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsRecentlyWatchedPost operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsRecentlyWatchedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add content to recently watched
     * @param {Number} body ID of the content to be added to recently watched list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsRecentlyWatchedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdListsRecentlyWatchedPost(body, userId, profileId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedPost");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsRecentlyWatchedPost");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/recently-watched', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsWatchLaterContentIdDelete operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsWatchLaterContentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove content from watch later list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {Number} contentId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsWatchLaterContentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdListsWatchLaterContentIdDelete(userId, profileId, contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsWatchLaterContentIdDelete");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsWatchLaterContentIdDelete");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling usersUserIdProfilesProfileIdListsWatchLaterContentIdDelete");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId,'contentId': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/watch-later/{contentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsWatchLaterGet operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsWatchLaterGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get watch later content list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsWatchLaterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdProfilesProfileIdListsWatchLaterGet(userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsWatchLaterGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsWatchLaterGet");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/watch-later', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdListsWatchLaterPost operation.
     * @callback moduleapi/ListsApi~usersUserIdProfilesProfileIdListsWatchLaterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add content to watch later
     * @param {Number} body ID of the content to be added to watch later list
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ListsApi~usersUserIdProfilesProfileIdListsWatchLaterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdListsWatchLaterPost(body, userId, profileId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUserIdProfilesProfileIdListsWatchLaterPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdListsWatchLaterPost");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdListsWatchLaterPost");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}/lists/watch-later', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}