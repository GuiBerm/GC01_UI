/*
 * User and Profile Management API
 * API for managing users, profiles, and individual content lists.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Profile from '../model/Profile';

/**
* Profiles service.
* @module api/ProfilesApi
* @version 1.0.0
*/
export default class ProfilesApi {

    /**
    * Constructs a new ProfilesApi. 
    * @alias module:api/ProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the usersUserIdProfilesGet operation.
     * @callback moduleapi/ProfilesApi~usersUserIdProfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Profile>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all profiles of a user
     * @param {Number} userId 
     * @param {module:api/ProfilesApi~usersUserIdProfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdProfilesGet(userId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Profile];

      return this.apiClient.callApi(
        '/users/{userId}/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesPost operation.
     * @callback moduleapi/ProfilesApi~usersUserIdProfilesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new profile for a user
     * @param {module:model/Profile} body Profile data
     * @param {Number} userId 
     * @param {module:api/ProfilesApi~usersUserIdProfilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesPost(body, userId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUserIdProfilesPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdDelete operation.
     * @callback moduleapi/ProfilesApi~usersUserIdProfilesProfileIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a profile
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ProfilesApi~usersUserIdProfilesProfileIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdDelete(userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdDelete");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdDelete");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdGet operation.
     * @callback moduleapi/ProfilesApi~usersUserIdProfilesProfileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile details by ID
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ProfilesApi~usersUserIdProfilesProfileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    usersUserIdProfilesProfileIdGet(userId, profileId, callback) {
      
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdGet");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the usersUserIdProfilesProfileIdPut operation.
     * @callback moduleapi/ProfilesApi~usersUserIdProfilesProfileIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a profile
     * @param {module:model/Profile} body Updated profile data
     * @param {Number} userId 
     * @param {Number} profileId 
     * @param {module:api/ProfilesApi~usersUserIdProfilesProfileIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdProfilesProfileIdPut(body, userId, profileId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersUserIdProfilesProfileIdPut");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdProfilesProfileIdPut");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling usersUserIdProfilesProfileIdPut");
      }

      let pathParams = {
        'userId': userId,'profileId': profileId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/profiles/{profileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}