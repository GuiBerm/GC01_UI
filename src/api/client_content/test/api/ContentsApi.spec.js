/*
 * Movie Streaming API
 * API for managing content (movies, series, and episodes) on a streaming platform.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MovieStreamingApi);
  }
}(this, function(expect, MovieStreamingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MovieStreamingApi.ContentsApi();
  });

  describe('(package)', function() {
    describe('ContentsApi', function() {
      describe('addContent', function() {
        it('should call addContent successfully', function(done) {
          // TODO: uncomment, update parameter values for addContent call and complete the assertions
          /*

          instance.addContent(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MovieStreamingApi.Content);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteContent', function() {
        it('should call deleteContent successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteContent call
          /*

          instance.deleteContent(contentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('filterContentsByGenres', function() {
        it('should call filterContentsByGenres successfully', function(done) {
          // TODO: uncomment, update parameter values for filterContentsByGenres call and complete the assertions
          /*

          instance.filterContentsByGenres(genres, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MovieStreamingApi.Content);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllGenres', function() {
        it('should call getAllGenres successfully', function(done) {
          // TODO: uncomment getAllGenres call
          /*

          instance.getAllGenres(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContentById', function() {
        it('should call getContentById successfully', function(done) {
          // TODO: uncomment, update parameter values for getContentById call and complete the assertions
          /*

          instance.getContentById(contentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MovieStreamingApi.Content);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getContents', function() {
        it('should call getContents successfully', function(done) {
          // TODO: uncomment getContents call and complete the assertions
          /*

          instance.getContents(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(MovieStreamingApi.Content);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchContents', function() {
        it('should call searchContents successfully', function(done) {
          // TODO: uncomment, update parameter values for searchContents call and complete the assertions
          /*

          instance.searchContents(keyword, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MovieStreamingApi.Content);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateContent', function() {
        it('should call updateContent successfully', function(done) {
          // TODO: uncomment, update parameter values for updateContent call and complete the assertions
          /*

          instance.updateContent(body, contentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MovieStreamingApi.Content);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
