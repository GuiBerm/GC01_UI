/*
 * Movie Streaming API
 * API for managing content (movies, series, and episodes) on a streaming platform.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Actor from '../model/Actor';

/**
* Actors service.
* @module api/ActorsApi
* @version 1.0.0
*/
export default class ActorsApi {

    /**
    * Constructs a new ActorsApi. 
    * @alias module:api/ActorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addActor operation.
     * @callback moduleapi/ActorsApi~addActorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Actor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new actor
     * Add a new actor to the platform
     * @param {module:model/Actor} body 
     * @param {module:api/ActorsApi~addActorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addActor(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addActor");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Actor;

      return this.apiClient.callApi(
        '/actors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteActor operation.
     * @callback moduleapi/ActorsApi~deleteActorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete actor
     * Delete actor by its ID
     * @param {Number} actorId The ID of the actor to delete
     * @param {module:api/ActorsApi~deleteActorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteActor(actorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'actorId' is set
      if (actorId === undefined || actorId === null) {
        throw new Error("Missing the required parameter 'actorId' when calling deleteActor");
      }

      let pathParams = {
        'actorId': actorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/actors/{actorId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getActorById operation.
     * @callback moduleapi/ActorsApi~getActorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Actor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get actor details
     * Get detailed information about a specific actor
     * @param {Number} actorId The ID of the actor to retrieve
     * @param {module:api/ActorsApi~getActorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getActorById(actorId, callback) {
      
      let postBody = null;
      // verify the required parameter 'actorId' is set
      if (actorId === undefined || actorId === null) {
        throw new Error("Missing the required parameter 'actorId' when calling getActorById");
      }

      let pathParams = {
        'actorId': actorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Actor;

      return this.apiClient.callApi(
        '/actors/{actorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getActors operation.
     * @callback moduleapi/ActorsApi~getActorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Actor>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all actors
     * Retrieve a list of all actors available in the platform
     * @param {module:api/ActorsApi~getActorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getActors(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Actor];

      return this.apiClient.callApi(
        '/actors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateActor operation.
     * @callback moduleapi/ActorsApi~updateActorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Actor{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update actor
     * Update information about a specific actor
     * @param {module:model/Actor} body 
     * @param {Number} actorId The ID of the actor to update
     * @param {module:api/ActorsApi~updateActorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateActor(body, actorId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateActor");
      }
      // verify the required parameter 'actorId' is set
      if (actorId === undefined || actorId === null) {
        throw new Error("Missing the required parameter 'actorId' when calling updateActor");
      }

      let pathParams = {
        'actorId': actorId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Actor;

      return this.apiClient.callApi(
        '/actors/{actorId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}