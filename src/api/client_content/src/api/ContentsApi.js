/*
 * Movie Streaming API
 * API for managing content (movies, series, and episodes) on a streaming platform.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Content from '../model/Content';

/**
* Contents service.
* @module api/ContentsApi
* @version 1.0.0
*/
export default class ContentsApi {

    /**
    * Constructs a new ContentsApi. 
    * @alias module:api/ContentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addContent operation.
     * @callback moduleapi/ContentsApi~addContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new content
     * Add new content to the platform
     * @param {module:model/Content} body 
     * @param {module:api/ContentsApi~addContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addContent(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addContent");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Content;

      return this.apiClient.callApi(
        '/contents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteContent operation.
     * @callback moduleapi/ContentsApi~deleteContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete content
     * Delete content by its ID
     * @param {Number} contentId The ID of the content to delete
     * @param {module:api/ContentsApi~deleteContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContent(contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteContent");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/contents/{contentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filterContentsByGenres operation.
     * @callback moduleapi/ContentsApi~filterContentsByGenresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Content>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter contents by genres
     * Retrieve contents filtered by one or more genres
     * @param {Array.<String>} genres List of genres to filter by
     * @param {module:api/ContentsApi~filterContentsByGenresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    filterContentsByGenres(genres, callback) {
      
      let postBody = null;
      // verify the required parameter 'genres' is set
      if (genres === undefined || genres === null) {
        throw new Error("Missing the required parameter 'genres' when calling filterContentsByGenres");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'genres': this.apiClient.buildCollectionParam(genres, 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Content];

      return this.apiClient.callApi(
        '/contents/filterByGenres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllGenres operation.
     * @callback moduleapi/ContentsApi~getAllGenresCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all available genres
     * Get a list of all genres available on the platform
     * @param {module:api/ContentsApi~getAllGenresCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllGenres(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [];

      return this.apiClient.callApi(
        '/contents/genres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getContentById operation.
     * @callback moduleapi/ContentsApi~getContentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get content details
     * Get detailed information about a specific content
     * @param {Number} contentId The ID of the content to retrieve
     * @param {module:api/ContentsApi~getContentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getContentById(contentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getContentById");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Content;

      return this.apiClient.callApi(
        '/contents/{contentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getContents operation.
     * @callback moduleapi/ContentsApi~getContentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Content>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all contents
     * Retrieve a list of all contents available on the platform
     * @param {module:api/ContentsApi~getContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getContents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Content];

      return this.apiClient.callApi(
        '/contents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchContents operation.
     * @callback moduleapi/ContentsApi~searchContentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search contents by keyword
     * Search contents using a single keyword that matches title, synopsis, actor names, or director names
     * @param {String} keyword Keyword to search across title, synopsis, actor names, or director names
     * @param {module:api/ContentsApi~searchContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchContents(keyword, callback) {
      
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchContents");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'keyword': keyword
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Content];

      return this.apiClient.callApi(
        '/contents/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateContent operation.
     * @callback moduleapi/ContentsApi~updateContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Content{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update content
     * Update information about specific content
     * @param {module:model/Content} body 
     * @param {Number} contentId The ID of the content to update
     * @param {module:api/ContentsApi~updateContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateContent(body, contentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateContent");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling updateContent");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', '*/*'];
      let returnType = Content;

      return this.apiClient.callApi(
        '/contents/{contentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}